For this workshop. We will demonstration enhance security on docker
-----------------------------------------------------------------------------------------------------------------
Part1: Docker Bench for Security 
-----------------------------------------------------------------------------------------------------------------
1. Pull script from git by command: "cd ~/ && git clone https://github.com/docker/docker-bench-security.git"

2. Build docker image by command: "cd ~/docker-bench-security && sudo sh ./docker-bench-security.sh"

3. Run docker container for security scan by command:
	docker container run --rm --net host --pid host --userns host --cap-add audit_control \
    -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
    -v /etc:/etc:ro \
    -v /usr/bin/containerd:/usr/bin/containerd:ro \
    -v /usr/bin/runc:/usr/bin/runc:ro \
    -v /usr/lib/systemd:/usr/lib/systemd:ro \
    -v /var/lib:/var/lib:ro \
    -v /var/run/docker.sock:/var/run/docker.sock:ro \
    --label docker_bench_security \
    docker/docker-bench-security

4. Enhance audit by command:
	sudo su -
	apt-get install -y auditd
	echo "-w /usr/bin/dockerd -k docker" >> /etc/audit/rules.d/audit.rules
	echo "-w /run/containerd -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /var/lib/docker -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /etc/docker -k docker" >> /etc/audit/rules.d/audit.rules
	echo "-w /lib/systemd/system/docker.service -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /lib/systemd/system/containerd.sock -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /etc/default/docker -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /etc/docker/daemon.json -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /etc/containerd/config.toml -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /usr/bin/containerd  -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /usr/bin/containerd-shim  -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /usr/bin/containerd-shim-runc-v1  -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /usr/bin/containerd-shim-runc-v2  -p wa" >> /etc/audit/rules.d/audit.rules
	echo "-w /usr/bin/runc  -p wa" >> /etc/audit/rules.d/audit.rules
	systemctl restart auditd
	systemctl enable auditd
	auditctl -l
	exit

5. Retest security scan again by command: "cd ~/docker-bench-security && sudo sh ./docker-bench-security.sh"
6. CleanUp Lab by command:
	cd ~/
	sudo rm -rf ~/docker-bench-security

-----------------------------------------------------------------------------------------------------------------
Part2: Apparmor in Container
-----------------------------------------------------------------------------------------------------------------
1. Run container for test default profile of Apparmor by command: "docker container run -dt --name sectestdefault labdocker/alpine:latest sh"

2. Access in to container and test some activity:
	docker container exec -it sectestdefault sh
	ping 1.1.1.1
	apk update
	apk add curl
	curl https://www.google.com

3. Test write file on /proc (prohibit path):
	touch /tmp/testcreatefile1
	touch /home/testcreatefile2
	touch /etc/testcreatefile3
	touch /proc/testcreatefile4
	cp /tmp/testcreatefile1 /proc/testprohibitfile
	ls -hl /proc | grep test

4. Stop test container by command: "docker container stop sectestdefault && docker container rm sectestdefault"

5. Copy profile and Load apparmor restrict profile by command:
	sudo apparmor_parser -r -W ~/docker-workshop-112022/Workshop-2-3-Docker-Security/restrict-apparmor

6. Check current profile of apparmor by command: sudo aa-status

7. Run container for test restrict profile of Apparmor by command:
	docker container run -dt --name sectestrestrict --security-opt "apparmor=restrict-apparmor" labdocker/alpine:latest sh

8. Access in to container and test some activity:
	docker container exec -it sectestrestrict sh
	ping 1.1.1.1
	apk update
	apk add curl
	curl https://www.google.com

9. Test write file on /proc (prohibit path):
	touch /tmp/testcreatefile1
	touch /home/testcreatefile2
	touch /etc/testcreatefile3
	touch /proc/testcreatefile4
	cp /tmp/testcreatefile1 /proc/testprohibitfile
	ls -hl /proc | grep test

10. Stop test container by command: "docker container stop sectestrestrict && docker container rm sectestrestrict"

11. Remove apparmor profile by command: sudo apparmor_parser -R ~/docker-workshop-112022/Workshop-2-3-Docker-Security/restrict-apparmor && sudo aa-status

-----------------------------------------------------------------------------------------------------------------
Part3: Content Trust (Signed Image)
-----------------------------------------------------------------------------------------------------------------
1. Enable content trust feature by command:
export DOCKER_CONTENT_TRUST=1

2. Create repository "alpine" on hub.docker.com and Tag image with out sign image and push to hub.docker.com by command:
docker image tag labdocker/alpine:latest <username>/alpine:unsign
docker login
docker image push --disable-content-trust=true <username>/alpine:unsign
docker logout

3. Remove existing image and test pull image from hub.docker.com by command:
docker image remove <username>/alpine:unsign
docker image ls
docker image pull <username>/alpine:unsign
docker image ls

4. Pull image with disable feature content trust by command:
docker image pull --disable-content-trust=true <username>/alpine:unsign
docker image ls

5. Tag image sign image and push to hub.docker.com by command:
docker image tag labdocker/alpine:latest <username>/alpine:sign
docker login
docker image push <username>/alpine:sign
	*Remark:
		This step docker will ask for passphase for root key and repository, Please input as you prefer
docker logout
#####################################
Example: Output
#####################################
The push refers to a repository [docker.io/praparn/alpine]
6102f0d2ad33: Layer already exists 
sign: digest: sha256:65242e8220a341cec40628caaea77eb4acd2fc252329aa853526fde15a4a1d85 size: 528
Signing and pushing trust metadata
You are about to create a new root signing key passphrase. This passphrase
will be used to protect the most sensitive key in your signing system. Please
choose a long, complex passphrase and be careful to keep the password and the
key file itself secure and backed up. It is highly recommended that you use a
password manager to generate the passphrase and keep it safe. There will be no
way to recover this key. You can find the key in your config directory.
Enter passphrase for new root key with ID ca6ab4b: <password>
Repeat passphrase for new root key with ID ca6ab4b: <password>
Enter passphrase for new repository key with ID 68d88cd (docker.io/praparn/alpine): <password>
Repeat passphrase for new repository key with ID 68d88cd (docker.io/praparn/alpine): <password>
Finished initializing "docker.io/praparn/alpine"
Successfully signed "docker.io/praparn/alpine":sign

*Remark:
For backup your key:
tar -czvf private_keys_backup.tar.gz ~/.docker/trust/private
scp -i "~/.ssh/docker_lab.pem" ubuntu@<public ip>:/home/ubuntu/private_keys_backup.tar.gz ./

For restore your key:
scp -i "~/.ssh/docker_lab.pem" private_keys_backup.tar.gz ubuntu@<public ip>:/home/ubuntu/
cd ~ && mkdir ~/temp
tar -xzvf ./private_keys_backup.tar.gz -C ~/temp
cp -r ~/temp/home/docker/.docker/trust/private/* ~/.docker/trust/private && rm -rf ~/temp

6. Remove existing image and test pull image from hub.docker.com by command:
docker login
docker image remove <username>/alpine:sign
docker image ls
docker image pull <username>/alpine:sign
docker image ls
docker logout
export DOCKER_CONTENT_TRUST=0